# -*- coding: utf-8 -*-
"""lstm

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EMkN_g0xWERKRLrQEGrHJXLmiPzi0DNh

Task-2: Stock Market Prediction And Forecasting Using Stacked LSTM

Level : Beginner

Language-Python

*Dataset*-: https://raw.githubusercontent.com/mwitiderrick/stockprice/master/NSE-TATAGLOBAL.csv

Importing Required Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf

from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM

import math
from sklearn.metrics import mean_squared_error

"""Reading the Dataset"""

data = pd.read_csv("https://raw.githubusercontent.com/mwitiderrick/stockprice/master/NSE-TATAGLOBAL.csv")
data.head()

"""Data Sorting


"""

data['Date']=pd.to_datetime(data['Date'])
print(type(data.Date[0]))

df=data.sort_values(by='Date')
df.head()

df=data.sort_values(by='Date')
df.head()

"""Visualization"""

plt.plot(df['Close'])

dff=df['Close']
dff

"""Min Max Scaler"""

scaler=MinMaxScaler(feature_range=(0,1))
dff=scaler.fit_transform(np.array(dff).reshape(-1,1))
dff

"""Spliting the Dataset"""

training_size=int(len(dff)*0.70)
test_size=len(dff)-training_size
train_data,test_data=dff[0:training_size,:],dff[training_size:len(dff),:1]

def create_dataset(dataset, time_step=1):
	dataX, dataY = [], []
	for i in range(len(dataset)-time_step-1):
		a = dataset[i:(i+time_step), 0]   
		dataX.append(a)
		dataY.append(dataset[i + time_step, 0])
	return np.array(dataX), np.array(dataY)

time_step = 100
X_train, y_train = create_dataset(train_data, time_step)
X_test, ytest = create_dataset(test_data, time_step)

print(X_train.shape), print(y_train.shape)

print(X_test.shape), print(ytest.shape)

X_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)
X_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)

"""Creating the LSTM Model"""

model=Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(100,1)))
model.add(LSTM(50,return_sequences=True))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss='mean_squared_error',optimizer='adam')
model.summary()

model.fit(X_train,y_train,validation_split=0.1,epochs=60,batch_size=64,verbose=1)

"""Prediction and Checking Performance"""

test_predict=model.predict(X_test)

test_predicted=scaler.inverse_transform(test_predict)
test_predicted

"""Calculating performance"""

performance = math.sqrt(mean_squared_error(ytest,test_predict))
performance